---
import Badge from '../components/Badge.astro'

const componentId = `certificate-${Math.random().toString(36).slice(2, 11)}`;
---

<div class="mb-5 w-full" data-component-id={componentId}>
    <h3 class="text-xs md:text-sm font-semibold text-gray-400 mb-4">CERTIFICADO</h3>
    <div class="flex mb-5 gap-x-12 md:gap-x-44">
        <div class="flex flex-col gap-x-2">
            <a href="https://www.helsinki.fi/en"><h2 class="text-sm md:text-base ml-1">University Of Helsinki</h2></a>
            <a href="https://www.houston-inc.com/"><h2 class="text-sm md:text-base ml-1">HOUSTON INC.</h2></a>
        </div>
        <div>
            <button class={`demobtn-${componentId} font-semibold`}><Badge>ver certificado</Badge></button>
        </div>
    </div>
    <div class={`demo-container-${componentId}`}>
        <div class="demo-modal">
            <div class="flex flex-col mb-3">
                <button class={`text-black self-end btn-modal-${componentId} text-base font-semibold`}>cerrar</button>
            </div>
            <!-- Imagen con lazy loading y optimización -->
            <div class="image-container">
                <img 
                    class="w-full h-auto certificate-image" 
                    data-src="/certificate.png"
                    data-loaded="false"
                    alt="Certificado de finalización"
                    id={`certificate-img-${componentId}`}
                    style="display: none;">
                <div class={`loading-spinner-${componentId}`}>
                    <div class="spinner"></div>
                    <p class="text-sm text-gray-600 mt-2">Cargando certificado...</p>
                </div>
            </div>
        </div>
    </div>
</div>

<style is:global>
    [class*="demo-container-"]{
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #111111bd;
        display: flex;
        opacity: 0;
        pointer-events: none;
        z-index: 9999;
    }
    .demo-modal{
        margin: auto;
        width: 90%;
        max-width: 800px;
        background-color: #FFF;
        border-radius: 6px;
        padding: 1em;
        max-height: 90vh;
        overflow-y: auto;
    }
    .modal--show{
        opacity: 1;
        pointer-events: inherit;
    }
    .image-container{
        position: relative;
        min-height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .certificate-image{
        border-radius: 4px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        transition: opacity 0.3s ease;
    }
    [class*="loading-spinner-"]{
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }
    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    /* Responsive adjustments */
    @media (max-width: 768px) {
        .demo-modal {
            width: 95%;
            padding: 0.75em;
        }
        .certificate-image {
            max-width: 100%;
            height: auto;
        }
    }
</style>

<script define:vars={{ componentId }}>
    // SINGLETON GLOBAL PARA GESTIÓN DE IMÁGENES
    (function() {
        // Crear el manager global solo una vez
        if (!window.globalImageManager) {
            window.globalImageManager = {
                isLoading: false,
                isLoaded: false,
                loadPromise: null,
                imageSrc: null,
                loadAttempts: 0,
                maxAttempts: 1,
                // Método para obtener o crear el blob URL
                getBlobUrl: async function(imageUrl) {
                    if (this.blobUrl) return this.blobUrl;
                    
                    try {
                        const response = await fetch(imageUrl);
                        const blob = await response.blob();
                        this.blobUrl = URL.createObjectURL(blob);
                        return this.blobUrl;
                    } catch (error) {
                        console.error('[DEBUG] Error creating blob URL:', error);
                        return imageUrl; // Fallback a URL original
                    }
                }
            };
        }
        
        const manager = window.globalImageManager;
        const IMAGE_URL = '/certificate.png';
        
        const showBtn = document.querySelector(`.demobtn-${componentId}`);
        const hideBtn = document.querySelector(`.btn-modal-${componentId}`);
        const demoContainer = document.querySelector(`.demo-container-${componentId}`);
        const image = document.querySelector(`#certificate-img-${componentId}`);
        const loadingSpinner = document.querySelector(`.loading-spinner-${componentId}`);
        
        console.log(`[DEBUG] Component ${componentId} initialized`);
        console.log(`[DEBUG] Manager state:`, { 
            isLoading: manager.isLoading, 
            isLoaded: manager.isLoaded, 
            loadAttempts: manager.loadAttempts 
        });
        
        // Función de carga con singleton REAL y mejor debugging
        async function loadImageOnce() {
            console.log(`[DEBUG] loadImageOnce called for ${componentId}`);
            
            // Si ya está cargado completamente, usar el src cacheado
            if (manager.isLoaded && manager.imageSrc) {
                console.log(`[DEBUG] Imagen ya cargada globalmente, aplicando src...`);
                image.src = manager.imageSrc;
                image.dataset.loaded = 'true';
                image.style.display = 'block';
                loadingSpinner.style.display = 'none';
                return;
            }
            
            // Si está cargando, esperar a que termine
            if (manager.isLoading && manager.loadPromise) {
                console.log(`[DEBUG] Imagen cargando globalmente, esperando...`);
                try {
                    await manager.loadPromise;
                    if (manager.imageSrc) {
                        image.src = manager.imageSrc;
                        image.dataset.loaded = 'true';
                        image.style.display = 'block';
                        loadingSpinner.style.display = 'none';
                    }
                } catch (error) {
                    console.error(`[DEBUG] Error esperando carga global:`, error);
                }
                return;
            }
            
            // Verificar límite de intentos GLOBAL
            if (manager.loadAttempts >= manager.maxAttempts) {
                console.log(`[DEBUG] Máximo de intentos alcanzado globalmente (${manager.maxAttempts})`);
                return;
            }
            
            // Iniciar carga ÚNICA GLOBAL
            manager.isLoading = true;
            manager.loadAttempts++;
            
            console.log(`[DEBUG] Iniciando carga ÚNICA GLOBAL de la imagen (intento ${manager.loadAttempts})`);
            
            manager.loadPromise = new Promise(async (resolve, reject) => {
                try {
                    // Primero, verificar si la imagen existe haciendo una petición HEAD
                    console.log(`[DEBUG] Verificando si la imagen existe: ${IMAGE_URL}`);
                    const headResponse = await fetch(IMAGE_URL, { method: 'HEAD' });
                    console.log(`[DEBUG] HEAD response status: ${headResponse.status}`);
                    
                    if (!headResponse.ok) {
                        throw new Error(`Imagen no encontrada: ${headResponse.status} ${headResponse.statusText}`);
                    }
                    
                    // Obtener el blob URL una sola vez
                    console.log(`[DEBUG] Descargando imagen...`);
                    const imageSrc = await manager.getBlobUrl(IMAGE_URL);
                    console.log(`[DEBUG] Blob URL creado: ${imageSrc.substring(0, 50)}...`);
                    
                    // Guardar el src globalmente
                    manager.imageSrc = imageSrc;
                    
                    // Aplicar a la imagen actual
                    console.log(`[DEBUG] Asignando src a la imagen...`);
                    image.src = imageSrc;
                    image.dataset.loaded = 'true';
                    
                    // Esperar a que la imagen se cargue completamente
                    const loadPromise = new Promise((imageResolve, imageReject) => {
                        const onLoad = () => {
                            cleanup();
                            console.log(`[DEBUG] Imagen cargada exitosamente GLOBALMENTE`);
                            console.log(`[DEBUG] Image dimensions: ${image.naturalWidth}x${image.naturalHeight}`);
                            image.style.display = 'block';
                            loadingSpinner.style.display = 'none';
                            imageResolve();
                        };
                        
                        const onError = (e) => {
                            cleanup();
                            console.error(`[DEBUG] Error cargando imagen globalmente:`, e);
                            console.error(`[DEBUG] Image src:`, image.src);
                            console.error(`[DEBUG] Image naturalWidth:`, image.naturalWidth);
                            console.error(`[DEBUG] Image naturalHeight:`, image.naturalHeight);
                            console.error(`[DEBUG] Image complete:`, image.complete);
                            loadingSpinner.innerHTML = '<p class="text-red-500 text-sm">Error al cargar el certificado</p>';
                            imageReject(e);
                        };
                        
                        const cleanup = () => {
                            image.removeEventListener('load', onLoad);
                            image.removeEventListener('error', onError);
                        };
                        
                        // Verificar si la imagen ya está cargada (puede pasar con imágenes pequeñas)
                        if (image.complete && image.naturalWidth > 0) {
                            console.log(`[DEBUG] Imagen ya estaba cargada`);
                            onLoad();
                            return;
                        }
                        
                        console.log(`[DEBUG] Configurando listeners para load/error`);
                        image.addEventListener('load', onLoad);
                        image.addEventListener('error', onError);
                        
                        // Forzar la carga de la imagen
                        console.log(`[DEBUG] Forzando carga de imagen...`);
                        if (image.src !== imageSrc) {
                            image.src = imageSrc;
                        }
                        
                        // Timeout de seguridad aumentado
                        setTimeout(() => {
                            cleanup();
                            console.error(`[DEBUG] Timeout loading image after 15 seconds`);
                            console.error(`[DEBUG] Final image state:`, {
                                complete: image.complete,
                                naturalWidth: image.naturalWidth,
                                naturalHeight: image.naturalHeight,
                                src: image.src.substring(0, 50) + '...'
                            });
                            imageReject(new Error('Timeout loading image'));
                        }, 15000);
                    });
                    
                // Método alternativo más simple - sin blob URL
                async function loadImageSimple() {
                    return new Promise((resolve, reject) => {
                        console.log(`[DEBUG] Método simple - cargando imagen directamente`);
                        
                        const onLoad = () => {
                            cleanup();
                            console.log(`[DEBUG] Imagen cargada con método simple`);
                            image.style.display = 'block';
                            loadingSpinner.style.display = 'none';
                            resolve();
                        };
                        
                        const onError = (e) => {
                            cleanup();
                            console.error(`[DEBUG] Error con método simple:`, e);
                            reject(e);
                        };
                        
                        const cleanup = () => {
                            image.removeEventListener('load', onLoad);
                            image.removeEventListener('error', onError);
                        };
                        
                        image.addEventListener('load', onLoad);
                        image.addEventListener('error', onError);
                        
                        // Cargar directamente sin blob URL
                        image.src = IMAGE_URL;
                        
                        setTimeout(() => {
                            cleanup();
                            reject(new Error('Timeout simple method'));
                        }, 5000);
                    });
                }
                
                // Intentar primero con blob URL, luego método simple
                try {
                    await loadPromise;
                } catch (error) {
                    console.log(`[DEBUG] Blob URL falló, intentando método simple...`);
                    try {
                        await loadImageSimple();
                    } catch (simpleError) {
                        console.error(`[DEBUG] Ambos métodos fallaron`);
                        throw simpleError;
                    }
                }
                    
                    manager.isLoaded = true;
                    manager.isLoading = false;
                    resolve();
                    
                } catch (error) {
                    console.error(`[DEBUG] Error en loadImageOnce:`, error);
                    manager.isLoading = false;
                    manager.loadAttempts = 0; // Reset para permitir reintento
                    loadingSpinner.innerHTML = '<p class="text-red-500 text-sm">Error al cargar el certificado</p>';
                    reject(error);
                }
            });
            
            await manager.loadPromise;
        }
        
        if (showBtn && demoContainer && image) {
            showBtn.addEventListener("click", async (e) => {
                // Prevenir múltiples clicks rápidos
                if (showBtn.disabled) return;
                showBtn.disabled = true;
                
                console.log(`[DEBUG] Click en mostrar certificado - ${componentId}`);
                console.log(`[DEBUG] Manager state before load:`, { 
                    isLoading: manager.isLoading, 
                    isLoaded: manager.isLoaded, 
                    loadAttempts: manager.loadAttempts,
                    hasImageSrc: !!manager.imageSrc
                });
                
                demoContainer.classList.add('modal--show');
                
                // Mostrar spinner si la imagen no está cargada
                if (!manager.isLoaded) {
                    loadingSpinner.style.display = 'flex';
                    image.style.display = 'none';
                }
                
                try {
                    await loadImageOnce();
                } catch (error) {
                    console.error(`[DEBUG] Error loading image:`, error);
                } finally {
                    // Re-habilitar botón después de un pequeño delay
                    setTimeout(() => {
                        showBtn.disabled = false;
                    }, 500);
                }
            });
        }
        
        if (hideBtn && demoContainer) {
            hideBtn.addEventListener("click", () => {
                console.log(`[DEBUG] Click en cerrar modal - ${componentId}`);
                demoContainer.classList.remove('modal--show');
            });
        }
        
        // Debug global (solo se ejecuta una vez por componente)
        setTimeout(() => {
            console.log(`[DEBUG] Estado del manager desde ${componentId}:`, {
                isLoading: manager.isLoading,
                isLoaded: manager.isLoaded,
                loadAttempts: manager.loadAttempts,
                hasImageSrc: !!manager.imageSrc,
                hasBlobUrl: !!manager.blobUrl
            });
            
            // Contar requests de imagen en Network (solo desde el primer componente)
            if (performance && performance.getEntriesByType && !window.imageDebugDone) {
                window.imageDebugDone = true;
                const imageRequests = performance.getEntriesByType('resource')
                    .filter(entry => entry.name.includes('certificate.png'));
                console.log(`[DEBUG] Requests de imagen detectados:`, imageRequests.length);
                console.log(`[DEBUG] Detalles de requests:`, imageRequests);
            }
        }, 1000);
        
    })(); // IIFE para evitar conflictos entre componentes
</script>