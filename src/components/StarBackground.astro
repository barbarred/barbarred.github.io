---
// StarBackground.astro
// Componente de fondo de estrellas para Astro
---

<div class="star-background">
  <div id="stars"></div>    
  <div id="stars2"></div>
  <div id="stars3"></div>
  <div class="shooting-star right-to-left"></div>
  <div class="shooting-star top-to-bottom"></div>
</div>

<style>
.star-background {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
  background: radial-gradient(ellipse at bottom, #1b2735 0%, #090a0f 100%);
  overflow: hidden;
  will-change: auto;
}

@media (max-width: 768px) {
  .star-background {
    position: absolute;
    min-height: 100vh;
    height: auto;
    top: 0;
    left: 0;
    width: 100%;
  }
}

:root {
  --stars-small: 
    12px 15px #FFF, 45px 87px #FFF, 123px 45px #FFF, 234px 123px #FFF, 345px 67px #FFF,
    456px 234px #FFF, 567px 89px #FFF, 678px 345px #FFF, 789px 123px #FFF, 890px 456px #FFF,
    23px 567px #FFF, 134px 234px #FFF, 245px 678px #FFF, 356px 345px #FFF, 467px 789px #FFF,
    578px 123px #FFF, 689px 567px #FFF, 790px 234px #FFF, 821px 678px #FFF, 932px 345px #FFF;
  
  --stars-medium:
    23px 234px #FFF, 145px 567px #FFF, 267px 123px #FFF, 389px 678px #FFF, 451px 234px #FFF,
    573px 789px #FFF, 695px 345px #FFF, 817px 567px #FFF, 939px 123px #FFF, 161px 678px #FFF;
  
  --stars-large:
    67px 345px #FFF, 189px 567px #FFF, 311px 123px #FFF, 433px 789px #FFF, 555px 234px #FFF;
}

@media (max-width: 768px) {
  :root {
    --stars-small: 
      12px 15px #FFF, 145px 87px #FFF, 223px 145px #FFF, 334px 223px #FFF, 445px 67px #FFF,
      156px 334px #FFF, 267px 189px #FFF, 378px 445px #FFF, 489px 223px #FFF, 590px 356px #FFF;
    
    --stars-medium:
      23px 134px #FFF, 245px 367px #FFF, 167px 223px #FFF, 289px 478px #FFF, 351px 134px #FFF;
    
    --stars-large:
      67px 245px #FFF, 189px 367px #FFF, 211px 123px #FFF;
  }
}

#stars {
  width: 1px;
  height: 1px;
  background: transparent;
  box-shadow: var(--stars-small);
  animation: animStar 50s linear infinite;
  transform: translate3d(0, 0, 0);
  will-change: transform;
}

#stars:after {
  content: " ";
  position: absolute;
  top: 2000px;
  width: 1px;
  height: 1px;
  background: transparent;
  box-shadow: var(--stars-small);
}

#stars2 {
  width: 2px;
  height: 2px;
  background: transparent;
  box-shadow: var(--stars-medium);
  animation: animStar 100s linear infinite;
  transform: translate3d(0, 0, 0);
  will-change: transform;
}

#stars2:after {
  content: " ";
  position: absolute;
  top: 2000px;
  width: 2px;
  height: 2px;
  background: transparent;
  box-shadow: var(--stars-medium);
}

#stars3 {
  width: 3px;
  height: 3px;
  background: transparent;
  box-shadow: var(--stars-large);
  animation: animStar 150s linear infinite;
  transform: translate3d(0, 0, 0);
  will-change: transform;
}

#stars3:after {
  content: " ";
  position: absolute;
  top: 2000px;
  width: 3px;
  height: 3px;
  background: transparent;
  box-shadow: var(--stars-large);
}

@keyframes animStar {
  from {
    transform: translate3d(0, 0, 0);
  }
  to {
    transform: translate3d(0, -2000px, 0);
  }
}

.shooting-star {
  position: absolute;
  width: 6px;
  height: 6px;
  background-color: #fff;
  border-radius: 50%;
  filter: drop-shadow(0 0 10px #fff);
  opacity: 0;
  will-change: transform, opacity;
  transform: translate3d(0, 0, 0);
}

.shooting-star::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transform: translateX(-100%);
  background: linear-gradient(to right, transparent, rgba(255, 255, 255, 0.4), transparent);
}

@keyframes shootingStarRightToLeft {
  0% {
    transform: translate3d(110vw, 20vh, 0) rotate(-15deg);
    opacity: 0;
  }
  15% {
    opacity: 1;
  }
  70% {
    transform: translate3d(-10vw, 40vh, 0) rotate(-15deg);
    opacity: 1;
  }
  100% {
    transform: translate3d(-10vw, 40vh, 0) rotate(-15deg);
    opacity: 0;
  }
}

@keyframes shootingStarTopToBottom {
  0% {
    transform: translate3d(30vw, -10vh, 0) rotate(45deg);
    opacity: 0;
  }
  15% {
    opacity: 1;
  }
  70% {
    transform: translate3d(60vw, 110vh, 0) rotate(45deg);
    opacity: 1;
  }
  100% {
    transform: translate3d(60vw, 110vh, 0) rotate(45deg);
    opacity: 0;
  }
}

@media (prefers-reduced-motion: reduce) {
  #stars, #stars2, #stars3 {
    animation-duration: 200s;
  }
  
  .shooting-star {
    display: none;
  }
}
</style>

<script>
class GalaxyOptimized {
  initialized = false;
  resizeTimeout = null;
  lastWidth = 0;
  lastHeight = 0;

  constructor() {
    this.initialized = false;
    this.resizeTimeout = null;
    this.lastWidth = 0;
    this.lastHeight = 0;
    this.init();
  }

  init() {
    if (this.initialized) return;
    
    this.updateStarsForCurrentViewport();
    this.setupEventListeners();
    this.initShootingStars();
    
    this.initialized = true;
  }

  updateStarsForCurrentViewport() {
    const width = window.innerWidth;
    const height = window.innerHeight;
    
    // Solo actualizar si el cambio es significativo (más de 100px de ancho o 50px de alto)
    if (this.lastWidth && this.lastHeight && 
        Math.abs(this.lastWidth - width) < 100 && 
        Math.abs(this.lastHeight - height) < 50) {
      return;
    }
    
    this.lastWidth = width;
    this.lastHeight = height;
    
    // Generar estrellas optimizadas para el viewport actual
    const smallStars = this.generateContinuousStars(Math.min(700, Math.floor(width * 0.5)), width, height);
    const mediumStars = this.generateContinuousStars(Math.min(200, Math.floor(width * 0.15)), width, height);
    const largeStars = this.generateContinuousStars(Math.min(100, Math.floor(width * 0.08)), width, height);
    
    // Actualizar CSS custom properties suavemente
    this.updateStarsSmooth(smallStars, mediumStars, largeStars);
  }

  updateStarsSmooth(smallStars: string, mediumStars: string, largeStars: string) {
    const root = document.documentElement;
    const stars = document.querySelectorAll('#stars, #stars2, #stars3');
    
    // Pausar animaciones momentáneamente
    stars.forEach(star => {
      (star as HTMLElement).style.animationPlayState = 'paused';
    });
    
    // Actualizar las propiedades CSS
    root.style.setProperty('--stars-small', smallStars);
    root.style.setProperty('--stars-medium', mediumStars);
    root.style.setProperty('--stars-large', largeStars);
    
    // Reanudar animaciones después de un frame
    requestAnimationFrame(() => {
      stars.forEach(star => {
        (star as HTMLElement).style.animationPlayState = 'running';
      });
    });
  }

  generateContinuousStars(count: number, maxWidth: number, maxHeight: number) {
    const stars = [];
    const extendedHeight = Math.max(4000, maxHeight * 3);
    
    for (let i = 0; i < count; i++) {
      const x = Math.floor(Math.random() * maxWidth);
      const y = Math.floor(Math.random() * extendedHeight) - Math.floor(extendedHeight / 2);
      stars.push(`${x}px ${y}px #FFF`);
    }
    
    return stars.join(', ');
  }

  setupEventListeners() {
    let resizeTimer: ReturnType<typeof setTimeout> | undefined;
    
    window.addEventListener('resize', () => {
      if (resizeTimer) {
        clearTimeout(resizeTimer);
      }
      
      // Debounce el resize para evitar demasiadas actualizaciones
      resizeTimer = setTimeout(() => {
        this.updateStarsForCurrentViewport();
      }, 300);
    });
  }

  initShootingStars() {
    const rightToLeft = document.querySelector('.right-to-left') as HTMLElement;
    const topToBottom = document.querySelector('.top-to-bottom') as HTMLElement;

    if (!rightToLeft || !topToBottom) return;

    const duration = 5000;
    const delay = 4000;

    const animateSequence = () => {
      this.animateShootingStar(rightToLeft, 'shootingStarRightToLeft', duration);
      
      setTimeout(() => {
        this.animateShootingStar(topToBottom, 'shootingStarTopToBottom', duration);
      }, delay);
    };

    // Iniciar la primera secuencia después de 1 segundo
    setTimeout(animateSequence, 1000);
    
    // Repetir cada 10 segundos
    setInterval(animateSequence, 10000);
  }

  animateShootingStar(element: HTMLElement, animationName: string, duration: number) {
    if (element) {
      element.style.animation = 'none';
      element.offsetHeight; // Forzar reflow
      element.style.animation = `${animationName} ${duration}ms cubic-bezier(0.4, 0, 0.2, 1)`;
    }
  }

  destroy() {
    if (this.resizeTimeout) {
      clearTimeout(this.resizeTimeout);
      this.resizeTimeout = null;
    }
    
    this.initialized = false;
  }
}

// Ajuste dinámico del alto del fondo en móviles para evitar el efecto "pegado" en scroll
function updateStarBackgroundHeight() {
  const bg = document.querySelector('.star-background') as HTMLElement;
  if (!bg) return;
  
  if (window.innerWidth <= 768) {
    bg.style.height = Math.max(document.body.scrollHeight, window.innerHeight) + 'px';
  } else {
    bg.style.height = '100%';
  }
}

function handleVisibilityChange() {
  const stars = document.querySelectorAll('#stars, #stars2, #stars3, .shooting-star');
  
  const playState = document.hidden ? 'paused' : 'running';
  stars.forEach((star) => {
    (star as HTMLElement).style.animationPlayState = playState;
  });
}

function initializeGalaxy() {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new GalaxyOptimized();
    });
  } else {
    new GalaxyOptimized();
  }
}

// Inicializar la galaxia
initializeGalaxy();

// Pausar animaciones cuando la pestaña no está visible
document.addEventListener('visibilitychange', handleVisibilityChange);

// Actualizar alto del fondo en resize y scroll
window.addEventListener('resize', updateStarBackgroundHeight);
window.addEventListener('scroll', updateStarBackgroundHeight);
document.addEventListener('DOMContentLoaded', updateStarBackgroundHeight);
</script>